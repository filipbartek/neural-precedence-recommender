% GCN
@misc{kipf2017semisupervised,
      title={Semi-Supervised Classification with Graph Convolutional Networks}, 
      author={Thomas N. Kipf and Max Welling},
      year={2017},
      eprint={1609.02907},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}

% E
@InProceedings{10.1007/978-3-030-29436-6_29,
author="Schulz, Stephan
and Cruanes, Simon
and Vukmirovi{\'{c}}, Petar",
editor="Fontaine, Pascal",
title="Faster, Higher, Stronger: E 2.3",
booktitle="Automated Deduction -- CADE 27",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="495--507",
abstract="E 2.3 is a theorem prover for many-sorted first-order logic with equality. We describe the basic logical and software architecture of the system, as well as core features of the implementation. We particularly discuss recently added features and extensions, including the extension to many-sorted logic, optional limited support for higher-order logic, and the integration of SAT techniques via PicoSAT. Minor additions include improved support for TPTP standard features, always-on internal proof objects, and lazy orphan removal. The paper also gives an overview of the performance of the system, and describes ongoing and future work.",
isbn="978-3-030-29436-6"
}

% Vampire
@InProceedings{10.1007/978-3-642-39799-8_1,
author="Kov{\'a}cs, Laura
and Voronkov, Andrei",
editor="Sharygina, Natasha
and Veith, Helmut",
title="First-Order Theorem Proving and Vampire",
booktitle="Computer Aided Verification",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--35",
abstract="In this paper we give a short introduction in first-order theorem proving and the use of the theorem prover Vampire. We discuss the superposition calculus and explain the key concepts of saturation and redundancy elimination, present saturation algorithms and preprocessing, and demonstrate how these concepts are implemented in Vampire. Further, we also cover more recent topics and features of Vampire designed for advanced applications, including satisfiability checking, theory reasoning, interpolation, consequence elimination, and program analysis.",
isbn="978-3-642-39799-8"
}

% LPO
@Unpublished{Kamin1980,
  author    = {Samuel N. Kamin and Jacques L{\'e}vy},
  title     = {Two generalizations of the recursive path ordering},
  year      = {1980},
  owner     = {filip},
  timestamp = {2019-12-02},
  note      = {Unpublished letter to Nachum Dershowitz},
  url       = {http://www.cs.tau.ac.il/~nachumd/term/kamin-levy80spo.pdf},
}

% KBO
@Inbook{Knuth1983,
author="Knuth, D. E.
and Bendix, P. B.",
editor="Siekmann, J{\"o}rg H.
and Wrightson, Graham",
title="Simple Word Problems in Universal Algebras",
bookTitle="Automation of Reasoning: 2: Classical Papers on Computational Logic 1967--1970",
year="1983",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="342--376",
abstract="An algorithm is described which is capable of solving certain word problems: i.e. of deciding whether or not two words composed of variables and operators can be proved equal as a consequence of a given set of identities satisfied by the operators. Although the general word problem is well known to be unsolvable, this algorithm provides results in many interesting cases. For example in elementary group theory if we are given the binary operator {\textperiodcentered}, the unary operator −, and the nullary operator e, the algorithm is capable of deducing from the three identities a {\textperiodcentered} (b {\textperiodcentered} c) = (a {\textperiodcentered} b) {\textperiodcentered} c, a {\textperiodcentered} a− = e, a {\textperiodcentered} e = a, the laws a− {\textperiodcentered} a = e, e {\textperiodcentered} a = a, a− −= a, etc.; and furthermore it can show that a {\textperiodcentered} b = b {\textperiodcentered} a−is not a consequence of the given axioms.",
isbn="978-3-642-81955-1",
doi="10.1007/978-3-642-81955-1\_23",
url="https://doi.org/10.1007/978-3-642-81955-1\_23"
}

% invfreq
@MISC{E-manual,
  author =   {Stephan Schulz},
  title =   {{E 2.4 User Manual}},
  url = {http://wwwlehre.dhbw-stuttgart.de/~sschulz/WORK/E\_DOWNLOAD/V\_2.4/eprover.pdf},
  urldate = {May 2020},
  year =   2019,
}
